<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monstache</title>
    <link>https://rwynn.github.io/monstache-site/</link>
    <description>Recent content on Monstache</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    
	<atom:link href="https://rwynn.github.io/monstache-site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monstache</title>
      <link>https://rwynn.github.io/monstache-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/</guid>
      <description>Sync MongoDB to ElasticSearch in near realtime Monstache is a sync daemon written in Go that continously indexes your MongoDB collections into Elasticsearch. Monstache gives you the ability to do complex searches and aggregations of your MongoDB data and easily build realtime Kibana visualizations and dashboards.
Quick start Download or Install with go get:
go get -v github.com/rwynn/monstache  Features  Optionally filter the set of collections to sync</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://rwynn.github.io/monstache-site/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/getting-started/</guid>
      <description>Installation Monstache is just a single binary without dependencies on runtimes like Ruby, Python or PHP. You just need to download the latest version.
Let&amp;rsquo;s make sure Monstache is set up as expected. You should see a similar version number in your terminal:
monstache -v # 3.2.0  Configuration Monstache uses the MongoDB oplog as an event source. You will need to make sure that MongoDB is configured to produce an oplog.</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://rwynn.github.io/monstache-site/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/options/</guid>
      <description>Options can be specified in your TOML config file or be passed into monstache as Go program arguments on the command line. Options specified as program arguments take precedance over the same option in the TOML config file.
print-config boolean (default false) When print-config is true monstache will print its configuration and then exit
stats boolean (default false) When stats is true monstache will periodically print statistics accumulated by the indexer</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>https://rwynn.github.io/monstache-site/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/namespaces/</guid>
      <description>When a document is inserted, updated, or deleted in mongodb a document is appended to the oplog representing the event. This document has a field ns which is the namespace. For inserts, updates, and deletes the namespace is the database name and collection name of the document changed joined by a dot. E.g. for use test; db.foo.insert({hello: &amp;quot;world&amp;quot;}); the namespace for the event in the oplog would be test.foo.
In addition to inserts, updates, and deletes monstache also supports database and collection drops.</description>
    </item>
    
    <item>
      <title>Index Mapping</title>
      <link>https://rwynn.github.io/monstache-site/index-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/index-mapping/</guid>
      <description>When indexing documents from MongoDB into elasticsearch the mapping is as follows:
mongodb database name . mongodb collection name -&amp;gt; elasticsearch index name mongodb collection name -&amp;gt; elasticsearch type mongodb document _id -&amp;gt; elasticsearch document _id  If these default won&amp;rsquo;t work for some reason you can override the index and type mapping on a per collection basis by adding the following to your TOML config file:
[[mapping]] namespace = &amp;quot;test.</description>
    </item>
    
    <item>
      <title>Transform and Filter</title>
      <link>https://rwynn.github.io/monstache-site/transform-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/transform-filter/</guid>
      <description>monstache supports embedding user defined middleware between MongoDB and Elasticsearch. middleware is able to transform documents, drop documents, or define indexing metadata. middleware may be written in either Javascript or in Golang as a plugin. Golang plugins require Go version 1.8 or greater. currently, you are able to use Javascript or Golang but not both (this may change in the future).
Golang monstache supports Golang 1.8 plugins on Linux. To implement a plugin for monstache you simply need to implement a specific function signature, use the go command to build a .</description>
    </item>
    
    <item>
      <title>Indexing GridFS Files</title>
      <link>https://rwynn.github.io/monstache-site/gridfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/gridfs/</guid>
      <description>Monstache supports indexing the raw content of files stored in GridFS into Elasticsearch for full text search. This feature requires that you install an Elasticsearch plugin which enables the field type attachment. For versions of Elasticsearch prior to version 5 you should install the mapper-attachments plugin. For version 5 or later of Elasticsearch you should instead install the ingest-attachment plugin.
Once you have installed the appropriate plugin for Elasticsearch, getting file content from GridFS into Elasticsearch is as simple as configuring monstache.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://rwynn.github.io/monstache-site/index-meta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/index-meta/</guid>
      <description>Domain knowledge of your data can lead to better performance with a custom routing solution. Routing is the process by which ElasticSearch determines which shard a document will reside in. Monstache supports user defined, or custom, routing of your MongoDB documents into ElasticSearch.
Consider an example where you have a comments collection in MongoDB which stores a comment and its associated post identifier.
use blog; db.comments.insert({title: &amp;quot;Did you read this?&amp;quot;, post_id: &amp;quot;123&amp;quot;}); db.</description>
    </item>
    
    <item>
      <title>Workers</title>
      <link>https://rwynn.github.io/monstache-site/workers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/workers/</guid>
      <description>You can run multiple monstache processes and distribute the work between them. First configure the names of all the workers in a shared config.toml file.
workers = [&amp;quot;Tom&amp;quot;, &amp;quot;Dick&amp;quot;, &amp;quot;Harry&amp;quot;]  In this case we have 3 workers. Now we can start 3 monstache processes and give each one of the worker names.
monstache -f config.toml -worker Tom monstache -f config.toml -worker Dick monstache -f config.toml -worker Harry  monstache will hash the id of each document using consistent hashing so that each id is handled by only one of the available workers.</description>
    </item>
    
    <item>
      <title>High Availability</title>
      <link>https://rwynn.github.io/monstache-site/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/high-availability/</guid>
      <description>You can run monstache in high availability mode by starting multiple processes with the same value for cluster-name. Each process will join a cluster which works together to ensure that a monstache process is always syncing to Elasticsearch.
High availability works by ensuring a active process in the monstache.cluster collection in mongodb. Only the processes in this collection will be syncing for the cluster. Processes not present in this collection will be paused.</description>
    </item>
    
    <item>
      <title>Merge Patches</title>
      <link>https://rwynn.github.io/monstache-site/merge-patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/merge-patches/</guid>
      <description>A unique feature of monstache is support for JSON Merge Patches rfc-7396.
If merge patches are enabled monstache will add an additional field to documents indexed into elasticsearch. The name of this field is configurable but it defaults to json-merge-patches.
Consider the following example with merge patches enabled&amp;hellip;
db.test.insert({name: &amp;quot;Joe&amp;quot;, age: 16, friends: [1, 2, 3]})  At this point you would have the following document source in elasticsearch.
 &amp;quot;_source&amp;quot; : { &amp;quot;age&amp;quot; : 16, &amp;quot;friends&amp;quot; : [ 1, 2, 3 ], &amp;quot;json-merge-patches&amp;quot; : [ { &amp;quot;p&amp;quot; : &amp;quot;{\&amp;quot;age\&amp;quot;:16,\&amp;quot;friends\&amp;quot;:[1,2,3],\&amp;quot;name\&amp;quot;:\&amp;quot;Joe\&amp;quot;}&amp;quot;, &amp;quot;ts&amp;quot; : 1487263414, &amp;quot;v&amp;quot; : 1 } ], &amp;quot;name&amp;quot; : &amp;quot;Joe&amp;quot; }  As you can see we have a single timestamped merge patch in the json-merge-patches array.</description>
    </item>
    
    <item>
      <title>Systemd</title>
      <link>https://rwynn.github.io/monstache-site/system-d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/system-d/</guid>
      <description>Monstache has support built in for integrating with systemd. The following monstache.service is an example systemd configuration.
[Unit] Description=monstache sync service [Service] Type=notify ExecStart=/usr/bin/monstache WatchdogSec=30s Restart=on-failure [Install] WantedBy=multi-user.target  System-d unit files are normally saved to /lib/systemd/system.
After adding monstache.service you can run systemctl daemon-reload to tell systemd to reload all unit files.
You can start the service with systemctl start monstache.service.
With the configuration above monstache will notify systemd when it has started successfully and then notify systemd repeatedly at half the WatchDog interval to signal liveness.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://rwynn.github.io/monstache-site/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rwynn.github.io/monstache-site/license/</guid>
      <description>The MIT License (MIT)
Copyright &amp;copy; 2016, 2017 Ryan Wynn
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
  </channel>
</rss>